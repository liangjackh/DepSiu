12:    # driver = ps.Driver()
19:        port = extract_kinds_from_descendants(token, desired_kinds=[ps.SyntaxKind.ImplicitAnsiPort])
74:        if kind == ps.StatementKind.Conditional:
88:        elif kind == ps.StatementKind.Case:
96:        elif kind in [ps.StatementKind.WhileLoop, ps.StatementKind.DoWhileLoop,
97:                      ps.StatementKind.ForLoop, ps.StatementKind.ForeverLoop,
98:                      ps.StatementKind.RepeatLoop, ps.StatementKind.ForeachLoop]:
110:        elif kind == ps.StatementKind.List and hasattr(stmt, 'body'):
114:        elif kind == ps.StatementKind.Block and hasattr(stmt, 'body'):
118:        elif kind in [ps.StatementKind.Return, ps.StatementKind.Break,
119:                      ps.StatementKind.Continue, ps.StatementKind.Disable,
120:                      ps.StatementKind.ForeverLoop]:
123:        elif kind == ps.StatementKind.Timed and hasattr(stmt, 'stmt'):
126:        elif kind in [ps.StatementKind.ImmediateAssertion, ps.StatementKind.ConcurrentAssertion,
127:                      ps.StatementKind.Wait, ps.StatementKind.WaitFork, ps.StatementKind.WaitOrder,
128:                      ps.StatementKind.RandCase, ps.StatementKind.RandSequence]:
132:        elif kind in [ps.StatementKind.ExpressionStatement,
133:                      ps.StatementKind.ProceduralAssign, ps.StatementKind.ProceduralDeassign,
134:                      ps.StatementKind.DisableFork, ps.StatementKind.EventTrigger,
135:                      ps.StatementKind.VariableDeclaration, ps.StatementKind.Empty]:
146:        if kind == ps.ExpressionKind.ConditionalOp:
152:        elif kind == ps.ExpressionKind.BinaryOp:
156:        elif kind == ps.ExpressionKind.UnaryOp:
159:        elif kind in [ps.ExpressionKind.Assignment,
160:                      ps.ExpressionKind.NamedValue,
161:                      ps.ExpressionKind.ElementSelect,
162:                      ps.ExpressionKind.RangeSelect,
163:                      ps.ExpressionKind.MemberAccess,
164:                      ps.ExpressionKind.Call]:
172:        elif kind in [ps.ExpressionKind.Concatenation, ps.ExpressionKind.Replication,
173:                      ps.ExpressionKind.StreamingConcatenation,
174:                      ps.ExpressionKind.SimpleAssignmentPattern,
175:                      ps.ExpressionKind.StructuredAssignmentPattern,
176:                      ps.ExpressionKind.ReplicatedAssignmentPattern,
177:                      ps.ExpressionKind.List, ps.ExpressionKind.Pattern,
178:                      ps.ExpressionKind.StructurePattern]:
186:        if not isinstance(symbol, ps.Symbol):
188:        if symbol.kind == ps.SymbolKind.Unknown:
191:        elif symbol.kind == ps.SymbolKind.Root:
194:        elif symbol.kind == ps.SymbolKind.Definition:
197:        elif symbol.kind == ps.SymbolKind.CompilationUnit:
200:        elif symbol.kind == ps.SymbolKind.DeferredMember:
203:        elif symbol.kind == ps.SymbolKind.TransparentMember:
206:        elif symbol.kind == ps.SymbolKind.EmptyMember:
209:        elif symbol.kind == ps.SymbolKind.PredefinedIntegerType:
212:        elif symbol.kind == ps.SymbolKind.ScalarType:
215:        elif symbol.kind == ps.SymbolKind.FloatingType:
218:        elif symbol.kind == ps.SymbolKind.EnumType:
221:        elif symbol.kind == ps.SymbolKind.EnumValue:
224:        elif symbol.kind == ps.SymbolKind.PackedArrayType:
227:        elif symbol.kind == ps.SymbolKind.FixedSizeUnpackedArrayType:
230:        elif symbol.kind == ps.SymbolKind.DynamicArrayType:
233:        elif symbol.kind == ps.SymbolKind.DPIOpenArrayType:
236:        elif symbol.kind == ps.SymbolKind.AssociativeArrayType:
239:        elif symbol.kind == ps.SymbolKind.QueueType:
242:        elif symbol.kind == ps.SymbolKind.PackedStructType:
245:        elif symbol.kind == ps.SymbolKind.UnpackedStructType:
248:        elif symbol.kind == ps.SymbolKind.PackedUnionType:
251:        elif symbol.kind == ps.SymbolKind.UnpackedUnionType:
254:        elif symbol.kind == ps.SymbolKind.ClassType:
257:        elif symbol.kind == ps.SymbolKind.CovergroupType:
260:        elif symbol.kind == ps.SymbolKind.VoidType:
263:        elif symbol.kind == ps.SymbolKind.NullType:
266:        elif symbol.kind == ps.SymbolKind.CHandleType:
269:        elif symbol.kind == ps.SymbolKind.StringType:
272:        elif symbol.kind == ps.SymbolKind.EventType:
275:        elif symbol.kind == ps.SymbolKind.UnboundedType:
278:        elif symbol.kind == ps.SymbolKind.TypeRefType:
281:        elif symbol.kind == ps.SymbolKind.UntypedType:
284:        elif symbol.kind == ps.SymbolKind.SequenceType:
287:        elif symbol.kind == ps.SymbolKind.PropertyType:
290:        elif symbol.kind == ps.SymbolKind.VirtualInterfaceType:
293:        elif symbol.kind == ps.SymbolKind.TypeAlias:
296:        elif symbol.kind == ps.SymbolKind.ErrorType:
299:        elif symbol.kind == ps.SymbolKind.ForwardingTypedef:
302:        elif symbol.kind == ps.SymbolKind.NetType:
305:        elif symbol.kind == ps.SymbolKind.Parameter:
308:        elif symbol.kind == ps.SymbolKind.TypeParameter:
311:        elif symbol.kind == ps.SymbolKind.Port:
314:        elif symbol.kind == ps.SymbolKind.MultiPort:
317:        elif symbol.kind == ps.SymbolKind.InterfacePort:
320:        elif symbol.kind == ps.SymbolKind.Modport:
323:        elif symbol.kind == ps.SymbolKind.ModportPort:
326:        elif symbol.kind == ps.SymbolKind.ModportClocking:
329:        elif symbol.kind == ps.SymbolKind.Instance:
333:        elif symbol.kind == ps.SymbolKind.InstanceBody:
337:        elif symbol.kind == ps.SymbolKind.InstanceArray:
340:        elif symbol.kind == ps.SymbolKind.Package:
343:        elif symbol.kind == ps.SymbolKind.ExplicitImport:
346:        elif symbol.kind == ps.SymbolKind.WildcardImport:
349:        elif symbol.kind == ps.SymbolKind.Attribute:
352:        elif symbol.kind == ps.SymbolKind.Genvar:
355:        elif symbol.kind == ps.SymbolKind.GenerateBlock:
358:        elif symbol.kind == ps.SymbolKind.GenerateBlockArray:
361:        elif symbol.kind == ps.SymbolKind.ProceduralBlock:
365:        elif symbol.kind == ps.SymbolKind.StatementBlock:
368:        elif symbol.kind == ps.SymbolKind.Net:
371:        elif symbol.kind == ps.SymbolKind.Variable:
374:        elif symbol.kind == ps.SymbolKind.FormalArgument:
377:        elif symbol.kind == ps.SymbolKind.Field:
380:        elif symbol.kind == ps.SymbolKind.ClassProperty:
383:        elif symbol.kind == ps.SymbolKind.Subroutine:
386:        elif symbol.kind == ps.SymbolKind.ContinuousAssign:
391:        elif symbol.kind == ps.SymbolKind.ElabSystemTask:
394:        elif symbol.kind == ps.SymbolKind.GenericClassDef:
397:        elif symbol.kind == ps.SymbolKind.MethodPrototype:
400:        elif symbol.kind == ps.SymbolKind.UninstantiatedDef:
403:        elif symbol.kind == ps.SymbolKind.Iterator:
406:        elif symbol.kind == ps.SymbolKind.PatternVar:
409:        elif symbol.kind == ps.SymbolKind.ConstraintBlock:
412:        elif symbol.kind == ps.SymbolKind.DefParam:
415:        elif symbol.kind == ps.SymbolKind.Specparam:
418:        elif symbol.kind == ps.SymbolKind.Primitive:
421:        elif symbol.kind == ps.SymbolKind.PrimitivePort:
424:        elif symbol.kind == ps.SymbolKind.PrimitiveInstance:
427:        elif symbol.kind == ps.SymbolKind.SpecifyBlock:
430:        elif symbol.kind == ps.SymbolKind.Sequence:
433:        elif symbol.kind == ps.SymbolKind.Property:
436:        elif symbol.kind == ps.SymbolKind.AssertionPort:
439:        elif symbol.kind == ps.SymbolKind.ClockingBlock:
442:        elif symbol.kind == ps.SymbolKind.ClockVar:
445:        elif symbol.kind == ps.SymbolKind.LocalAssertionVar:
448:        elif symbol.kind == ps.SymbolKind.LetDecl:
451:        elif symbol.kind == ps.SymbolKind.Checker:
454:        elif symbol.kind == ps.SymbolKind.CheckerInstance:
457:        elif symbol.kind == ps.SymbolKind.CheckerInstanceBody:
460:        elif symbol.kind == ps.SymbolKind.RandSeqProduction:
463:        elif symbol.kind == ps.SymbolKind.CovergroupBody:
466:        elif symbol.kind == ps.SymbolKind.Coverpoint:
469:        elif symbol.kind == ps.SymbolKind.CoverCross:
472:        elif symbol.kind == ps.SymbolKind.CoverCrossBody:
475:        elif symbol.kind == ps.SymbolKind.CoverageBin:
478:        elif symbol.kind == ps.SymbolKind.TimingPath:
481:        elif symbol.kind == ps.SymbolKind.PulseStyle:
484:        elif symbol.kind == ps.SymbolKind.SystemTimingCheck:
487:        elif symbol.kind == ps.SymbolKind.AnonymousProgram:
490:        elif symbol.kind == ps.SymbolKind.NetAlias:
493:        elif symbol.kind == ps.SymbolKind.ConfigBlock:
523:        if not isinstance(symbol, ps.Symbol):
532:            ps.SymbolKind.Variable,
533:            ps.SymbolKind.Parameter,
534:            ps.SymbolKind.Port,
539:        if symbol.kind == ps.SymbolKind.ProceduralBlock and hasattr(symbol, "body"):
541:        elif symbol.kind == ps.SymbolKind.ContinuousAssign and hasattr(symbol, "assignment"):
548:        if hasattr(symbol, "body") and symbol.kind != ps.SymbolKind.ProceduralBlock:
554:        if stmt.kind == ps.StatementKind.ExpressionStatement:
556:        elif stmt.kind == ps.StatementKind.Block:
559:        elif stmt.kind == ps.StatementKind.Conditional:
570:        elif stmt.kind == ps.StatementKind.List:
580:        if kind == ps.ExpressionKind.NamedValue:
583:        elif kind == ps.ExpressionKind.BinaryOp:
587:        elif kind == ps.ExpressionKind.UnaryOp:
590:        elif kind == ps.ExpressionKind.ConditionalOp:
595:        elif kind == ps.ExpressionKind.Assignment:
599:        elif kind in [ps.ExpressionKind.Concatenation, ps.ExpressionKind.StreamingConcatenation]:
603:        elif kind == ps.ExpressionKind.Call:
607:        elif kind == ps.ExpressionKind.ElementSelect:
611:        elif kind == ps.ExpressionKind.RangeSelect:
616:        elif kind in [ps.ExpressionKind.MemberAccess, ps.ExpressionKind.Streaming,
617:                    ps.ExpressionKind.Replication, ps.ExpressionKind.TaggedUnion,
618:                    ps.ExpressionKind.Cast, ps.ExpressionKind.SignedCast,
619:                    ps.ExpressionKind.UnsignedCast, ps.ExpressionKind.CopyClass,
620:                    ps.ExpressionKind.StreamExpression, ps.ExpressionKind.StreamExpressionWithRange,
621:                    ps.ExpressionKind.Parenthesized]:
624:        elif kind in [ps.ExpressionKind.SimpleAssignmentPattern, ps.ExpressionKind.List,
625:                    ps.ExpressionKind.Pattern]:
629:        elif kind in [ps.ExpressionKind.StructuredAssignmentPattern, ps.ExpressionKind.StructurePattern]:
633:        elif kind == ps.ExpressionKind.ReplicatedAssignmentPattern:
638:        elif kind in [ps.ExpressionKind.MinTypMax]:
644:        elif kind in [ps.ExpressionKind.IntegerLiteral, ps.ExpressionKind.RealLiteral,
645:                    ps.ExpressionKind.TimeLiteral, ps.ExpressionKind.NullLiteral,
646:                    ps.ExpressionKind.StringLiteral, ps.ExpressionKind.UnbasedUnsizedLiteral]:
649:        elif kind == ps.ExpressionKind.Unknown:
659:        if kind == ps.StatementKind.ExpressionStatement:
662:        elif kind == ps.StatementKind.Block and hasattr(stmt, "body"):
666:        elif kind == ps.StatementKind.Conditional:
707:        elif kind == ps.StatementKind.List:
711:        elif kind == ps.StatementKind.Loop:
721:        elif kind == ps.StatementKind.While:
757:        elif kind == ps.StatementKind.DoWhile:
764:        elif kind == ps.StatementKind.Case:
800:        elif kind in [ps.StatementKind.Assign, ps.StatementKind.NonBlockingAssign]:
811:        elif kind == ps.StatementKind.ProcedureCall:
814:        elif kind in [ps.StatementKind.Initial, ps.StatementKind.Always,
815:                    ps.StatementKind.ParallelBlock, ps.StatementKind.SequentialBlock,
816:                    ps.StatementKind.TimingControl]:
819:        elif kind in [ps.StatementKind.Assert, ps.StatementKind.Assume, ps.StatementKind.Cover]:
825:        elif kind == ps.StatementKind.Return and hasattr(stmt, "expr"):
828:        elif kind in [ps.StatementKind.Break, ps.StatementKind.Continue, ps.StatementKind.Empty,
829:                    ps.StatementKind.Declaration, ps.StatementKind.DisableFork,
830:                    ps.StatementKind.WaitFork, ps.StatementKind.EventTrigger,
831:                    ps.StatementKind.Disable, ps.StatementKind.WaitOrder]:
845:        if kind == ps.ExpressionKind.NamedValue:
848:                if symbol.kind == ps.SymbolKind.Parameter:
850:                elif symbol.kind == ps.SymbolKind.Port:
852:        elif kind == ps.ExpressionKind.BinaryOp:
855:        elif kind == ps.ExpressionKind.UnaryOp:
857:        elif kind == ps.ExpressionKind.Assignment:
860:        elif kind == ps.ExpressionKind.Concatenation:
863:        elif kind == ps.ExpressionKind.Call:
866:        elif kind == ps.ExpressionKind.ElementSelect:
869:        elif kind == ps.ExpressionKind.RangeSelect:
873:        elif kind == ps.ExpressionKind.ConditionalOp:
877:        elif kind == ps.ExpressionKind.MemberAccess:
879:        elif kind == ps.ExpressionKind.Streaming:
881:        elif kind == ps.ExpressionKind.Replication:
885:        elif kind == ps.ExpressionKind.SimpleAssignmentPattern:
888:        elif kind == ps.ExpressionKind.StructuredAssignmentPattern:
891:        elif kind == ps.ExpressionKind.ReplicatedAssignmentPattern:
945:        if p_node.kind == ps.SyntaxKind.ConditionalStatement:
950:        if p_node.kind == ps.SyntaxKind.ConditionalExpression:
967:        # if node.kind == ps.SyntaxKind.CompilationUnit:
969:        if node.kind == ps.SyntaxKind.ModuleDeclaration:
971:        elif node.kind == ps.SyntaxKind.HierarchicalInstance:
973:        elif node.kind == ps.SyntaxKind.Declarator:
981:    def extract_kinds_from_descendants(nid, desired_kinds=[ps.TokenKind.Identifier]):
1002:        if node.kind == ps.SyntaxKind.Unknown:
1004:        elif node.kind == ps.SyntaxKind.SyntaxList:
1006:        elif node.kind == ps.SyntaxKind.TokenList:
1008:        elif node.kind == ps.SyntaxKind.SeparatedList:
1010:        elif node.kind == ps.SyntaxKind.AcceptOnPropertyExpr:
1012:        elif node.kind == ps.SyntaxKind.ActionBlock:
1014:        elif node.kind == ps.SyntaxKind.AddAssignmentExpression:
1016:        elif node.kind == ps.SyntaxKind.AddExpression:
1018:        elif node.kind == ps.SyntaxKind.AlwaysBlock:
1020:        elif node.kind == ps.SyntaxKind.AlwaysCombBlock:
1022:        elif node.kind == ps.SyntaxKind.AlwaysFFBlock:
1024:        elif node.kind == ps.SyntaxKind.AlwaysLatchBlock:
1026:        elif node.kind == ps.SyntaxKind.AndAssignmentExpression:
1028:        elif node.kind == ps.SyntaxKind.AndPropertyExpr:
1030:        elif node.kind == ps.SyntaxKind.AndSequenceExpr:
1032:        elif node.kind == ps.SyntaxKind.AnonymousProgram:
1034:        elif node.kind == ps.SyntaxKind.AnsiPortList:
1036:        elif node.kind == ps.SyntaxKind.AnsiUdpPortList:
1038:        elif node.kind == ps.SyntaxKind.ArgumentList:
1040:        elif node.kind == ps.SyntaxKind.ArithmeticLeftShiftAssignmentExpression:
1042:        elif node.kind == ps.SyntaxKind.ArithmeticRightShiftAssignmentExpression:
1044:        elif node.kind == ps.SyntaxKind.ArithmeticShiftLeftExpression:
1046:        elif node.kind == ps.SyntaxKind.ArithmeticShiftRightExpression:
1048:        elif node.kind == ps.SyntaxKind.ArrayAndMethod:
1050:        elif node.kind == ps.SyntaxKind.ArrayOrMethod:
1052:        elif node.kind == ps.SyntaxKind.ArrayOrRandomizeMethodExpression:
1054:        elif node.kind == ps.SyntaxKind.ArrayUniqueMethod:
1056:        elif node.kind == ps.SyntaxKind.ArrayXorMethod:
1058:        elif node.kind == ps.SyntaxKind.AscendingRangeSelect:
1060:        elif node.kind == ps.SyntaxKind.AssertPropertyStatement:
1062:        elif node.kind == ps.SyntaxKind.AssertionItemPort:
1064:        elif node.kind == ps.SyntaxKind.AssertionItemPortList:
1066:        elif node.kind == ps.SyntaxKind.AssignmentExpression:
1068:        elif node.kind == ps.SyntaxKind.AssignmentPatternExpression:
1070:        elif node.kind == ps.SyntaxKind.AssignmentPatternItem:
1072:        elif node.kind == ps.SyntaxKind.AssumePropertyStatement:
1074:        elif node.kind == ps.SyntaxKind.AttributeInstance:
1076:        elif node.kind == ps.SyntaxKind.AttributeSpec:
1078:        elif node.kind == ps.SyntaxKind.BadExpression:
1080:        elif node.kind == ps.SyntaxKind.BeginKeywordsDirective:
1082:        elif node.kind == ps.SyntaxKind.BinSelectWithFilterExpr:
1084:        elif node.kind == ps.SyntaxKind.BinaryAndExpression:
1086:        elif node.kind == ps.SyntaxKind.BinaryBinsSelectExpr:
1088:        elif node.kind == ps.SyntaxKind.BinaryBlockEventExpression:
1090:        elif node.kind == ps.SyntaxKind.BinaryConditionalDirectiveExpression:
1092:        elif node.kind == ps.SyntaxKind.BinaryEventExpression:
1094:        elif node.kind == ps.SyntaxKind.BinaryOrExpression:
1096:        elif node.kind == ps.SyntaxKind.BinaryXnorExpression:
1098:        elif node.kind == ps.SyntaxKind.BinaryXorExpression:
1100:        elif node.kind == ps.SyntaxKind.BindDirective:
1102:        elif node.kind == ps.SyntaxKind.BindTargetList:
1104:        elif node.kind == ps.SyntaxKind.BinsSelectConditionExpr:
1106:        elif node.kind == ps.SyntaxKind.BinsSelection:
1108:        elif node.kind == ps.SyntaxKind.BitSelect:
1110:        elif node.kind == ps.SyntaxKind.BitType:
1112:        elif node.kind == ps.SyntaxKind.BlockCoverageEvent:
1114:        elif node.kind == ps.SyntaxKind.BlockingEventTriggerStatement:
1116:        elif node.kind == ps.SyntaxKind.ByteType:
1118:        elif node.kind == ps.SyntaxKind.CHandleType:
1120:        elif node.kind == ps.SyntaxKind.CaseEqualityExpression:
1122:        elif node.kind == ps.SyntaxKind.CaseGenerate:
1124:        elif node.kind == ps.SyntaxKind.CaseInequalityExpression:
1126:        elif node.kind == ps.SyntaxKind.CasePropertyExpr:
1128:        elif node.kind == ps.SyntaxKind.CaseStatement:
1130:        elif node.kind == ps.SyntaxKind.CastExpression:
1132:        elif node.kind == ps.SyntaxKind.CellConfigRule:
1134:        elif node.kind == ps.SyntaxKind.CellDefineDirective:
1136:        elif node.kind == ps.SyntaxKind.ChargeStrength:
1138:        elif node.kind == ps.SyntaxKind.CheckerDataDeclaration:
1140:        elif node.kind == ps.SyntaxKind.CheckerDeclaration:
1142:        elif node.kind == ps.SyntaxKind.CheckerInstanceStatement:
1144:        elif node.kind == ps.SyntaxKind.CheckerInstantiation:
1146:        elif node.kind == ps.SyntaxKind.ClassDeclaration:
1148:        elif node.kind == ps.SyntaxKind.ClassMethodDeclaration:
1150:        elif node.kind == ps.SyntaxKind.ClassMethodPrototype:
1152:        elif node.kind == ps.SyntaxKind.ClassName:
1154:        elif node.kind == ps.SyntaxKind.ClassPropertyDeclaration:
1156:        elif node.kind == ps.SyntaxKind.ClassSpecifier:
1158:        elif node.kind == ps.SyntaxKind.ClockingDeclaration:
1160:        elif node.kind == ps.SyntaxKind.ClockingDirection:
1162:        elif node.kind == ps.SyntaxKind.ClockingItem:
1164:        elif node.kind == ps.SyntaxKind.ClockingPropertyExpr:
1166:        elif node.kind == ps.SyntaxKind.ClockingSequenceExpr:
1168:        elif node.kind == ps.SyntaxKind.ClockingSkew:
1170:        elif node.kind == ps.SyntaxKind.ColonExpressionClause:
1172:        elif node.kind == ps.SyntaxKind.CompilationUnit:
1174:        elif node.kind == ps.SyntaxKind.ConcatenationExpression:
1176:        elif node.kind == ps.SyntaxKind.ConcurrentAssertionMember:
1178:        elif node.kind == ps.SyntaxKind.ConditionalConstraint:
1180:        elif node.kind == ps.SyntaxKind.ConditionalExpression:
1182:        elif node.kind == ps.SyntaxKind.ConditionalPathDeclaration:
1184:        elif node.kind == ps.SyntaxKind.ConditionalPattern:
1186:        elif node.kind == ps.SyntaxKind.ConditionalPredicate:
1188:        elif node.kind == ps.SyntaxKind.ConditionalPropertyExpr:
1190:        elif node.kind == ps.SyntaxKind.ConditionalStatement:
1192:        elif node.kind == ps.SyntaxKind.ConfigCellIdentifier:
1194:        elif node.kind == ps.SyntaxKind.ConfigDeclaration:
1196:        elif node.kind == ps.SyntaxKind.ConfigInstanceIdentifier:
1198:        elif node.kind == ps.SyntaxKind.ConfigLiblist:
1200:        elif node.kind == ps.SyntaxKind.ConfigUseClause:
1202:        elif node.kind == ps.SyntaxKind.ConstraintBlock:
1204:        elif node.kind == ps.SyntaxKind.ConstraintDeclaration:
1206:        elif node.kind == ps.SyntaxKind.ConstraintPrototype:
1208:        elif node.kind == ps.SyntaxKind.ConstructorName:
1210:        elif node.kind == ps.SyntaxKind.ContinuousAssign:
1212:        elif node.kind == ps.SyntaxKind.CopyClassExpression:
1214:        elif node.kind == ps.SyntaxKind.CoverCross:
1216:        elif node.kind == ps.SyntaxKind.CoverPropertyStatement:
1218:        elif node.kind == ps.SyntaxKind.CoverSequenceStatement:
1220:        elif node.kind == ps.SyntaxKind.CoverageBins:
1222:        elif node.kind == ps.SyntaxKind.CoverageBinsArraySize:
1224:        elif node.kind == ps.SyntaxKind.CoverageIffClause:
1226:        elif node.kind == ps.SyntaxKind.CoverageOption:
1228:        elif node.kind == ps.SyntaxKind.CovergroupDeclaration:
1230:        elif node.kind == ps.SyntaxKind.Coverpoint:
1232:        elif node.kind == ps.SyntaxKind.CycleDelay:
1234:        elif node.kind == ps.SyntaxKind.DPIExport:
1236:        elif node.kind == ps.SyntaxKind.DPIImport:
1238:        elif node.kind == ps.SyntaxKind.DataDeclaration:
1240:        elif node.kind == ps.SyntaxKind.Declarator:
1242:        elif node.kind == ps.SyntaxKind.DefParam:
1244:        elif node.kind == ps.SyntaxKind.DefParamAssignment:
1246:        elif node.kind == ps.SyntaxKind.DefaultCaseItem:
1248:        elif node.kind == ps.SyntaxKind.DefaultClockingReference:
1250:        elif node.kind == ps.SyntaxKind.DefaultConfigRule:
1252:        elif node.kind == ps.SyntaxKind.DefaultCoverageBinInitializer:
1254:        elif node.kind == ps.SyntaxKind.DefaultDecayTimeDirective:
1256:        elif node.kind == ps.SyntaxKind.DefaultDisableDeclaration:
1258:        elif node.kind == ps.SyntaxKind.DefaultDistItem:
1260:        elif node.kind == ps.SyntaxKind.DefaultExtendsClauseArg:
1262:        elif node.kind == ps.SyntaxKind.DefaultFunctionPort:
1264:        elif node.kind == ps.SyntaxKind.DefaultNetTypeDirective:
1266:        elif node.kind == ps.SyntaxKind.DefaultPatternKeyExpression:
1268:        elif node.kind == ps.SyntaxKind.DefaultPropertyCaseItem:
1270:        elif node.kind == ps.SyntaxKind.DefaultRsCaseItem:
1272:        elif node.kind == ps.SyntaxKind.DefaultSkewItem:
1274:        elif node.kind == ps.SyntaxKind.DefaultTriregStrengthDirective:
1276:        elif node.kind == ps.SyntaxKind.DeferredAssertion:
1278:        elif node.kind == ps.SyntaxKind.DefineDirective:
1280:        elif node.kind == ps.SyntaxKind.Delay3:
1282:        elif node.kind == ps.SyntaxKind.DelayControl:
1284:        elif node.kind == ps.SyntaxKind.DelayModeDistributedDirective:
1286:        elif node.kind == ps.SyntaxKind.DelayModePathDirective:
1288:        elif node.kind == ps.SyntaxKind.DelayModeUnitDirective:
1290:        elif node.kind == ps.SyntaxKind.DelayModeZeroDirective:
1292:        elif node.kind == ps.SyntaxKind.DelayedSequenceElement:
1294:        elif node.kind == ps.SyntaxKind.DelayedSequenceExpr:
1296:        elif node.kind == ps.SyntaxKind.DescendingRangeSelect:
1298:        elif node.kind == ps.SyntaxKind.DisableConstraint:
1300:        elif node.kind == ps.SyntaxKind.DisableForkStatement:
1302:        elif node.kind == ps.SyntaxKind.DisableIff:
1304:        elif node.kind == ps.SyntaxKind.DisableStatement:
1306:        elif node.kind == ps.SyntaxKind.DistConstraintList:
1308:        elif node.kind == ps.SyntaxKind.DistItem:
1310:        elif node.kind == ps.SyntaxKind.DistWeight:
1312:        elif node.kind == ps.SyntaxKind.DivideAssignmentExpression:
1314:        elif node.kind == ps.SyntaxKind.DivideExpression:
1316:        elif node.kind == ps.SyntaxKind.DividerClause:
1318:        elif node.kind == ps.SyntaxKind.DoWhileStatement:
1320:        elif node.kind == ps.SyntaxKind.DotMemberClause:
1322:        elif node.kind == ps.SyntaxKind.DriveStrength:
1324:        elif node.kind == ps.SyntaxKind.EdgeControlSpecifier:
1326:        elif node.kind == ps.SyntaxKind.EdgeDescriptor:
1328:        elif node.kind == ps.SyntaxKind.EdgeSensitivePathSuffix:
1330:        elif node.kind == ps.SyntaxKind.ElabSystemTask:
1332:        elif node.kind == ps.SyntaxKind.ElementSelect:
1334:        elif node.kind == ps.SyntaxKind.ElementSelectExpression:
1336:        elif node.kind == ps.SyntaxKind.ElsIfDirective:
1338:        elif node.kind == ps.SyntaxKind.ElseClause:
1340:        elif node.kind == ps.SyntaxKind.ElseConstraintClause:
1342:        elif node.kind == ps.SyntaxKind.ElseDirective:
1344:        elif node.kind == ps.SyntaxKind.ElsePropertyClause:
1346:        elif node.kind == ps.SyntaxKind.EmptyArgument:
1348:        elif node.kind == ps.SyntaxKind.EmptyIdentifierName:
1350:        elif node.kind == ps.SyntaxKind.EmptyMember:
1352:        elif node.kind == ps.SyntaxKind.EmptyNonAnsiPort:
1354:        elif node.kind == ps.SyntaxKind.EmptyPortConnection:
1356:        elif node.kind == ps.SyntaxKind.EmptyQueueExpression:
1358:        elif node.kind == ps.SyntaxKind.EmptyStatement:
1360:        elif node.kind == ps.SyntaxKind.EmptyTimingCheckArg:
1362:        elif node.kind == ps.SyntaxKind.EndCellDefineDirective:
1364:        elif node.kind == ps.SyntaxKind.EndIfDirective:
1366:        elif node.kind == ps.SyntaxKind.EndKeywordsDirective:
1368:        elif node.kind == ps.SyntaxKind.EndProtectDirective:
1370:        elif node.kind == ps.SyntaxKind.EndProtectedDirective:
1372:        elif node.kind == ps.SyntaxKind.EnumType:
1374:        elif node.kind == ps.SyntaxKind.EqualityExpression:
1376:        elif node.kind == ps.SyntaxKind.EqualsAssertionArgClause:
1378:        elif node.kind == ps.SyntaxKind.EqualsTypeClause:
1380:        elif node.kind == ps.SyntaxKind.EqualsValueClause:
1382:        elif node.kind == ps.SyntaxKind.EventControl:
1384:        elif node.kind == ps.SyntaxKind.EventControlWithExpression:
1386:        elif node.kind == ps.SyntaxKind.EventType:
1388:        elif node.kind == ps.SyntaxKind.ExpectPropertyStatement:
1390:        elif node.kind == ps.SyntaxKind.ExplicitAnsiPort:
1392:        elif node.kind == ps.SyntaxKind.ExplicitNonAnsiPort:
1394:        elif node.kind == ps.SyntaxKind.ExpressionConstraint:
1396:        elif node.kind == ps.SyntaxKind.ExpressionCoverageBinInitializer:
1398:        elif node.kind == ps.SyntaxKind.ExpressionOrDist:
1400:        elif node.kind == ps.SyntaxKind.ExpressionPattern:
1402:        elif node.kind == ps.SyntaxKind.ExpressionStatement:
1404:        elif node.kind == ps.SyntaxKind.ExpressionTimingCheckArg:
1406:        elif node.kind == ps.SyntaxKind.ExtendsClause:
1408:        elif node.kind == ps.SyntaxKind.ExternInterfaceMethod:
1410:        elif node.kind == ps.SyntaxKind.ExternModuleDecl:
1412:        elif node.kind == ps.SyntaxKind.ExternUdpDecl:
1414:        elif node.kind == ps.SyntaxKind.FilePathSpec:
1416:        elif node.kind == ps.SyntaxKind.FinalBlock:
1418:        elif node.kind == ps.SyntaxKind.FirstMatchSequenceExpr:
1420:        elif node.kind == ps.SyntaxKind.FollowedByPropertyExpr:
1422:        elif node.kind == ps.SyntaxKind.ForLoopStatement:
1424:        elif node.kind == ps.SyntaxKind.ForVariableDeclaration:
1426:        elif node.kind == ps.SyntaxKind.ForeachLoopList:
1428:        elif node.kind == ps.SyntaxKind.ForeachLoopStatement:
1430:        elif node.kind == ps.SyntaxKind.ForeverStatement:
1432:        elif node.kind == ps.SyntaxKind.ForwardTypeRestriction:
1434:        elif node.kind == ps.SyntaxKind.ForwardTypedefDeclaration:
1436:        elif node.kind == ps.SyntaxKind.FunctionDeclaration:
1438:        elif node.kind == ps.SyntaxKind.FunctionPort:
1440:        elif node.kind == ps.SyntaxKind.FunctionPortList:
1442:        elif node.kind == ps.SyntaxKind.FunctionPrototype:
1444:        elif node.kind == ps.SyntaxKind.GenerateBlock:
1446:        elif node.kind == ps.SyntaxKind.GenerateRegion:
1448:        elif node.kind == ps.SyntaxKind.GenvarDeclaration:
1450:        elif node.kind == ps.SyntaxKind.GreaterThanEqualExpression:
1452:        elif node.kind == ps.SyntaxKind.GreaterThanExpression:
1454:        elif node.kind == ps.SyntaxKind.HierarchicalInstance:
1456:        elif node.kind == ps.SyntaxKind.HierarchyInstantiation:
1458:        elif node.kind == ps.SyntaxKind.IdWithExprCoverageBinInitializer:
1460:        elif node.kind == ps.SyntaxKind.IdentifierName:
1462:        elif node.kind == ps.SyntaxKind.IdentifierSelectName:
1464:        elif node.kind == ps.SyntaxKind.IfDefDirective:
1466:        elif node.kind == ps.SyntaxKind.IfGenerate:
1468:        elif node.kind == ps.SyntaxKind.IfNDefDirective:
1470:        elif node.kind == ps.SyntaxKind.IfNonePathDeclaration:
1472:        elif node.kind == ps.SyntaxKind.IffEventClause:
1474:        elif node.kind == ps.SyntaxKind.IffPropertyExpr:
1476:        elif node.kind == ps.SyntaxKind.ImmediateAssertStatement:
1478:        elif node.kind == ps.SyntaxKind.ImmediateAssertionMember:
1480:        elif node.kind == ps.SyntaxKind.ImmediateAssumeStatement:
1482:        elif node.kind == ps.SyntaxKind.ImmediateCoverStatement:
1484:        elif node.kind == ps.SyntaxKind.ImplementsClause:
1486:        elif node.kind == ps.SyntaxKind.ImplicationConstraint:
1488:        elif node.kind == ps.SyntaxKind.ImplicationPropertyExpr:
1490:        elif node.kind == ps.SyntaxKind.ImplicitAnsiPort:
1492:        elif node.kind == ps.SyntaxKind.ImplicitEventControl:
1494:        elif node.kind == ps.SyntaxKind.ImplicitNonAnsiPort:
1496:        elif node.kind == ps.SyntaxKind.ImplicitType:
1498:        elif node.kind == ps.SyntaxKind.ImpliesPropertyExpr:
1500:        elif node.kind == ps.SyntaxKind.IncludeDirective:
1502:        elif node.kind == ps.SyntaxKind.InequalityExpression:
1504:        elif node.kind == ps.SyntaxKind.InitialBlock:
1506:        elif node.kind == ps.SyntaxKind.InsideExpression:
1508:        elif node.kind == ps.SyntaxKind.InstanceConfigRule:
1510:        elif node.kind == ps.SyntaxKind.InstanceName:
1512:        elif node.kind == ps.SyntaxKind.IntType:
1514:        elif node.kind == ps.SyntaxKind.IntegerLiteralExpression:
1516:        elif node.kind == ps.SyntaxKind.IntegerType:
1518:        elif node.kind == ps.SyntaxKind.IntegerVectorExpression:
1520:        elif node.kind == ps.SyntaxKind.InterfaceDeclaration:
1522:        elif node.kind == ps.SyntaxKind.InterfaceHeader:
1524:        elif node.kind == ps.SyntaxKind.InterfacePortHeader:
1526:        elif node.kind == ps.SyntaxKind.IntersectClause:
1528:        elif node.kind == ps.SyntaxKind.IntersectSequenceExpr:
1530:        elif node.kind == ps.SyntaxKind.InvocationExpression:
1532:        elif node.kind == ps.SyntaxKind.JumpStatement:
1534:        elif node.kind == ps.SyntaxKind.LessThanEqualExpression:
1536:        elif node.kind == ps.SyntaxKind.LessThanExpression:
1538:        elif node.kind == ps.SyntaxKind.LetDeclaration:
1540:        elif node.kind == ps.SyntaxKind.LibraryDeclaration:
1542:        elif node.kind == ps.SyntaxKind.LibraryIncDirClause:
1544:        elif node.kind == ps.SyntaxKind.LibraryIncludeStatement:
1546:        elif node.kind == ps.SyntaxKind.LibraryMap:
1548:        elif node.kind == ps.SyntaxKind.LineDirective:
1550:        elif node.kind == ps.SyntaxKind.LocalScope:
1552:        elif node.kind == ps.SyntaxKind.LocalVariableDeclaration:
1554:        elif node.kind == ps.SyntaxKind.LogicType:
1556:        elif node.kind == ps.SyntaxKind.LogicalAndExpression:
1558:        elif node.kind == ps.SyntaxKind.LogicalEquivalenceExpression:
1560:        elif node.kind == ps.SyntaxKind.LogicalImplicationExpression:
1562:        elif node.kind == ps.SyntaxKind.LogicalLeftShiftAssignmentExpression:
1564:        elif node.kind == ps.SyntaxKind.LogicalOrExpression:
1566:        elif node.kind == ps.SyntaxKind.LogicalRightShiftAssignmentExpression:
1568:        elif node.kind == ps.SyntaxKind.LogicalShiftLeftExpression:
1570:        elif node.kind == ps.SyntaxKind.LogicalShiftRightExpression:
1572:        elif node.kind == ps.SyntaxKind.LongIntType:
1574:        elif node.kind == ps.SyntaxKind.LoopConstraint:
1576:        elif node.kind == ps.SyntaxKind.LoopGenerate:
1578:        elif node.kind == ps.SyntaxKind.LoopStatement:
1580:        elif node.kind == ps.SyntaxKind.MacroActualArgument:
1582:        elif node.kind == ps.SyntaxKind.MacroActualArgumentList:
1584:        elif node.kind == ps.SyntaxKind.MacroArgumentDefault:
1586:        elif node.kind == ps.SyntaxKind.MacroFormalArgument:
1588:        elif node.kind == ps.SyntaxKind.MacroFormalArgumentList:
1590:        elif node.kind == ps.SyntaxKind.MacroUsage:
1592:        elif node.kind == ps.SyntaxKind.MatchesClause:
1594:        elif node.kind == ps.SyntaxKind.MemberAccessExpression:
1596:        elif node.kind == ps.SyntaxKind.MinTypMaxExpression:
1598:        elif node.kind == ps.SyntaxKind.ModAssignmentExpression:
1600:        elif node.kind == ps.SyntaxKind.ModExpression:
1602:        elif node.kind == ps.SyntaxKind.ModportClockingPort:
1604:        elif node.kind == ps.SyntaxKind.ModportDeclaration:
1606:        elif node.kind == ps.SyntaxKind.ModportExplicitPort:
1608:        elif node.kind == ps.SyntaxKind.ModportItem:
1610:        elif node.kind == ps.SyntaxKind.ModportNamedPort:
1612:        elif node.kind == ps.SyntaxKind.ModportSimplePortList:
1614:        elif node.kind == ps.SyntaxKind.ModportSubroutinePort:
1616:        elif node.kind == ps.SyntaxKind.ModportSubroutinePortList:
1618:        elif node.kind == ps.SyntaxKind.ModuleDeclaration:
1620:        elif node.kind == ps.SyntaxKind.ModuleHeader:
1622:        elif node.kind == ps.SyntaxKind.MultipleConcatenationExpression:
1624:        elif node.kind == ps.SyntaxKind.MultiplyAssignmentExpression:
1626:        elif node.kind == ps.SyntaxKind.MultiplyExpression:
1628:        elif node.kind == ps.SyntaxKind.NameValuePragmaExpression:
1630:        elif node.kind == ps.SyntaxKind.NamedArgument:
1632:        elif node.kind == ps.SyntaxKind.NamedBlockClause:
1634:        elif node.kind == ps.SyntaxKind.NamedConditionalDirectiveExpression:
1636:        elif node.kind == ps.SyntaxKind.NamedLabel:
1638:        elif node.kind == ps.SyntaxKind.NamedParamAssignment:
1640:        elif node.kind == ps.SyntaxKind.NamedPortConnection:
1642:        elif node.kind == ps.SyntaxKind.NamedStructurePatternMember:
1644:        elif node.kind == ps.SyntaxKind.NamedType:
1646:        elif node.kind == ps.SyntaxKind.NetAlias:
1648:        elif node.kind == ps.SyntaxKind.NetDeclaration:
1650:        elif node.kind == ps.SyntaxKind.NetPortHeader:
1652:        elif node.kind == ps.SyntaxKind.NetTypeDeclaration:
1654:        elif node.kind == ps.SyntaxKind.NewArrayExpression:
1656:        elif node.kind == ps.SyntaxKind.NewClassExpression:
1658:        elif node.kind == ps.SyntaxKind.NoUnconnectedDriveDirective:
1660:        elif node.kind == ps.SyntaxKind.NonAnsiPortList:
1662:        elif node.kind == ps.SyntaxKind.NonAnsiUdpPortList:
1664:        elif node.kind == ps.SyntaxKind.NonblockingAssignmentExpression:
1666:        elif node.kind == ps.SyntaxKind.NonblockingEventTriggerStatement:
1668:        elif node.kind == ps.SyntaxKind.NullLiteralExpression:
1670:        elif node.kind == ps.SyntaxKind.NumberPragmaExpression:
1672:        elif node.kind == ps.SyntaxKind.OneStepDelay:
1674:        elif node.kind == ps.SyntaxKind.OrAssignmentExpression:
1676:        elif node.kind == ps.SyntaxKind.OrPropertyExpr:
1678:        elif node.kind == ps.SyntaxKind.OrSequenceExpr:
1680:        elif node.kind == ps.SyntaxKind.OrderedArgument:
1682:        elif node.kind == ps.SyntaxKind.OrderedParamAssignment:
1684:        elif node.kind == ps.SyntaxKind.OrderedPortConnection:
1686:        elif node.kind == ps.SyntaxKind.OrderedStructurePatternMember:
1688:        elif node.kind == ps.SyntaxKind.PackageDeclaration:
1690:        elif node.kind == ps.SyntaxKind.PackageExportAllDeclaration:
1692:        elif node.kind == ps.SyntaxKind.PackageExportDeclaration:
1694:        elif node.kind == ps.SyntaxKind.PackageHeader:
1696:        elif node.kind == ps.SyntaxKind.PackageImportDeclaration:
1698:        elif node.kind == ps.SyntaxKind.PackageImportItem:
1700:        elif node.kind == ps.SyntaxKind.ParallelBlockStatement:
1702:        elif node.kind == ps.SyntaxKind.ParameterDeclaration:
1704:        elif node.kind == ps.SyntaxKind.ParameterDeclarationStatement:
1706:        elif node.kind == ps.SyntaxKind.ParameterPortList:
1708:        elif node.kind == ps.SyntaxKind.ParameterValueAssignment:
1710:        elif node.kind == ps.SyntaxKind.ParenExpressionList:
1712:        elif node.kind == ps.SyntaxKind.ParenPragmaExpression:
1714:        elif node.kind == ps.SyntaxKind.ParenthesizedBinsSelectExpr:
1716:        elif node.kind == ps.SyntaxKind.ParenthesizedConditionalDirectiveExpression:
1718:        elif node.kind == ps.SyntaxKind.ParenthesizedEventExpression:
1720:        elif node.kind == ps.SyntaxKind.ParenthesizedExpression:
1722:        elif node.kind == ps.SyntaxKind.ParenthesizedPattern:
1724:        elif node.kind == ps.SyntaxKind.ParenthesizedPropertyExpr:
1726:        elif node.kind == ps.SyntaxKind.ParenthesizedSequenceExpr:
1728:        elif node.kind == ps.SyntaxKind.PathDeclaration:
1730:        elif node.kind == ps.SyntaxKind.PathDescription:
1732:        elif node.kind == ps.SyntaxKind.PatternCaseItem:
1734:        elif node.kind == ps.SyntaxKind.PortConcatenation:
1736:        elif node.kind == ps.SyntaxKind.PortDeclaration:
1738:        elif node.kind == ps.SyntaxKind.PortReference:
1740:        elif node.kind == ps.SyntaxKind.PostdecrementExpression:
1742:        elif node.kind == ps.SyntaxKind.PostincrementExpression:
1744:        elif node.kind == ps.SyntaxKind.PowerExpression:
1746:        elif node.kind == ps.SyntaxKind.PragmaDirective:
1748:        elif node.kind == ps.SyntaxKind.PrimaryBlockEventExpression:
1750:        elif node.kind == ps.SyntaxKind.PrimitiveInstantiation:
1752:        elif node.kind == ps.SyntaxKind.ProceduralAssignStatement:
1754:        elif node.kind == ps.SyntaxKind.ProceduralDeassignStatement:
1756:        elif node.kind == ps.SyntaxKind.ProceduralForceStatement:
1758:        elif node.kind == ps.SyntaxKind.ProceduralReleaseStatement:
1760:        elif node.kind == ps.SyntaxKind.Production:
1762:        elif node.kind == ps.SyntaxKind.ProgramDeclaration:
1764:        elif node.kind == ps.SyntaxKind.ProgramHeader:
1766:        elif node.kind == ps.SyntaxKind.PropertyDeclaration:
1768:        elif node.kind == ps.SyntaxKind.PropertySpec:
1770:        elif node.kind == ps.SyntaxKind.PropertyType:
1772:        elif node.kind == ps.SyntaxKind.ProtectDirective:
1774:        elif node.kind == ps.SyntaxKind.ProtectedDirective:
1776:        elif node.kind == ps.SyntaxKind.PullStrength:
1778:        elif node.kind == ps.SyntaxKind.PulseStyleDeclaration:
1780:        elif node.kind == ps.SyntaxKind.QueueDimensionSpecifier:
1782:        elif node.kind == ps.SyntaxKind.RandCaseItem:
1784:        elif node.kind == ps.SyntaxKind.RandCaseStatement:
1786:        elif node.kind == ps.SyntaxKind.RandJoinClause:
1788:        elif node.kind == ps.SyntaxKind.RandSequenceStatement:
1790:        elif node.kind == ps.SyntaxKind.RangeCoverageBinInitializer:
1792:        elif node.kind == ps.SyntaxKind.RangeDimensionSpecifier:
1794:        elif node.kind == ps.SyntaxKind.RangeList:
1796:        elif node.kind == ps.SyntaxKind.RealLiteralExpression:
1798:        elif node.kind == ps.SyntaxKind.RealTimeType:
1800:        elif node.kind == ps.SyntaxKind.RealType:
1802:        elif node.kind == ps.SyntaxKind.RegType:
1804:        elif node.kind == ps.SyntaxKind.RepeatedEventControl:
1806:        elif node.kind == ps.SyntaxKind.ReplicatedAssignmentPattern:
1808:        elif node.kind == ps.SyntaxKind.ResetAllDirective:
1810:        elif node.kind == ps.SyntaxKind.RestrictPropertyStatement:
1812:        elif node.kind == ps.SyntaxKind.ReturnStatement:
1814:        elif node.kind == ps.SyntaxKind.RootScope:
1816:        elif node.kind == ps.SyntaxKind.RsCase:
1818:        elif node.kind == ps.SyntaxKind.RsCodeBlock:
1820:        elif node.kind == ps.SyntaxKind.RsElseClause:
1822:        elif node.kind == ps.SyntaxKind.RsIfElse:
1824:        elif node.kind == ps.SyntaxKind.RsProdItem:
1826:        elif node.kind == ps.SyntaxKind.RsRepeat:
1828:        elif node.kind == ps.SyntaxKind.RsRule:
1830:        elif node.kind == ps.SyntaxKind.RsWeightClause:
1832:        elif node.kind == ps.SyntaxKind.SUntilPropertyExpr:
1834:        elif node.kind == ps.SyntaxKind.SUntilWithPropertyExpr:
1836:        elif node.kind == ps.SyntaxKind.ScopedName:
1838:        elif node.kind == ps.SyntaxKind.SequenceDeclaration:
1840:        elif node.kind == ps.SyntaxKind.SequenceMatchList:
1842:        elif node.kind == ps.SyntaxKind.SequenceRepetition:
1844:        elif node.kind == ps.SyntaxKind.SequenceType:
1846:        elif node.kind == ps.SyntaxKind.SequentialBlockStatement:
1848:        elif node.kind == ps.SyntaxKind.ShortIntType:
1850:        elif node.kind == ps.SyntaxKind.ShortRealType:
1852:        elif node.kind == ps.SyntaxKind.SignalEventExpression:
1854:        elif node.kind == ps.SyntaxKind.SignedCastExpression:
1856:        elif node.kind == ps.SyntaxKind.SimpleAssignmentPattern:
1858:        elif node.kind == ps.SyntaxKind.SimpleBinsSelectExpr:
1860:        elif node.kind == ps.SyntaxKind.SimplePathSuffix:
1862:        elif node.kind == ps.SyntaxKind.SimplePragmaExpression:
1864:        elif node.kind == ps.SyntaxKind.SimplePropertyExpr:
1866:        elif node.kind == ps.SyntaxKind.SimpleRangeSelect:
1868:        elif node.kind == ps.SyntaxKind.SimpleSequenceExpr:
1870:        elif node.kind == ps.SyntaxKind.SolveBeforeConstraint:
1872:        elif node.kind == ps.SyntaxKind.SpecifyBlock:
1874:        elif node.kind == ps.SyntaxKind.SpecparamDeclaration:
1876:        elif node.kind == ps.SyntaxKind.SpecparamDeclarator:
1878:        elif node.kind == ps.SyntaxKind.StandardCaseItem:
1880:        elif node.kind == ps.SyntaxKind.StandardPropertyCaseItem:
1882:        elif node.kind == ps.SyntaxKind.StandardRsCaseItem:
1884:        elif node.kind == ps.SyntaxKind.StreamExpression:
1886:        elif node.kind == ps.SyntaxKind.StreamExpressionWithRange:
1888:        elif node.kind == ps.SyntaxKind.StreamingConcatenationExpression:
1890:        elif node.kind == ps.SyntaxKind.StringLiteralExpression:
1892:        elif node.kind == ps.SyntaxKind.StringType:
1894:        elif node.kind == ps.SyntaxKind.StrongWeakPropertyExpr:
1896:        elif node.kind == ps.SyntaxKind.StructType:
1898:        elif node.kind == ps.SyntaxKind.StructUnionMember:
1900:        elif node.kind == ps.SyntaxKind.StructurePattern:
1902:        elif node.kind == ps.SyntaxKind.StructuredAssignmentPattern:
1904:        elif node.kind == ps.SyntaxKind.SubtractAssignmentExpression:
1906:        elif node.kind == ps.SyntaxKind.SubtractExpression:
1908:        elif node.kind == ps.SyntaxKind.SuperHandle:
1910:        elif node.kind == ps.SyntaxKind.SuperNewDefaultedArgsExpression:
1912:        elif node.kind == ps.SyntaxKind.SystemName:
1914:        elif node.kind == ps.SyntaxKind.SystemTimingCheck:
1916:        elif node.kind == ps.SyntaxKind.TaggedPattern:
1918:        elif node.kind == ps.SyntaxKind.TaggedUnionExpression:
1920:        elif node.kind == ps.SyntaxKind.TaskDeclaration:
1922:        elif node.kind == ps.SyntaxKind.ThisHandle:
1924:        elif node.kind == ps.SyntaxKind.ThroughoutSequenceExpr:
1926:        elif node.kind == ps.SyntaxKind.TimeLiteralExpression:
1928:        elif node.kind == ps.SyntaxKind.TimeScaleDirective:
1930:        elif node.kind == ps.SyntaxKind.TimeType:
1932:        elif node.kind == ps.SyntaxKind.TimeUnitsDeclaration:
1934:        elif node.kind == ps.SyntaxKind.TimingCheckEventArg:
1936:        elif node.kind == ps.SyntaxKind.TimingCheckEventCondition:
1938:        elif node.kind == ps.SyntaxKind.TimingControlExpression:
1940:        elif node.kind == ps.SyntaxKind.TimingControlStatement:
1942:        elif node.kind == ps.SyntaxKind.TransListCoverageBinInitializer:
1944:        elif node.kind == ps.SyntaxKind.TransRange:
1946:        elif node.kind == ps.SyntaxKind.TransRepeatRange:
1948:        elif node.kind == ps.SyntaxKind.TransSet:
1950:        elif node.kind == ps.SyntaxKind.TypeAssignment:
1952:        elif node.kind == ps.SyntaxKind.TypeParameterDeclaration:
1954:        elif node.kind == ps.SyntaxKind.TypeReference:
1956:        elif node.kind == ps.SyntaxKind.TypedefDeclaration:
1958:        elif node.kind == ps.SyntaxKind.UdpBody:
1960:        elif node.kind == ps.SyntaxKind.UdpDeclaration:
1962:        elif node.kind == ps.SyntaxKind.UdpEdgeField:
1964:        elif node.kind == ps.SyntaxKind.UdpEntry:
1966:        elif node.kind == ps.SyntaxKind.UdpInitialStmt:
1968:        elif node.kind == ps.SyntaxKind.UdpInputPortDecl:
1970:        elif node.kind == ps.SyntaxKind.UdpOutputPortDecl:
1972:        elif node.kind == ps.SyntaxKind.UdpSimpleField:
1974:        elif node.kind == ps.SyntaxKind.UnaryBinsSelectExpr:
1976:        elif node.kind == ps.SyntaxKind.UnaryBitwiseAndExpression:
1978:        elif node.kind == ps.SyntaxKind.UnaryBitwiseNandExpression:
1980:        elif node.kind == ps.SyntaxKind.UnaryBitwiseNorExpression:
1982:        elif node.kind == ps.SyntaxKind.UnaryBitwiseNotExpression:
1984:        elif node.kind == ps.SyntaxKind.UnaryBitwiseOrExpression:
1986:        elif node.kind == ps.SyntaxKind.UnaryBitwiseXnorExpression:
1988:        elif node.kind == ps.SyntaxKind.UnaryBitwiseXorExpression:
1990:        elif node.kind == ps.SyntaxKind.UnaryConditionalDirectiveExpression:
1992:        elif node.kind == ps.SyntaxKind.UnaryLogicalNotExpression:
1994:        elif node.kind == ps.SyntaxKind.UnaryMinusExpression:
1996:        elif node.kind == ps.SyntaxKind.UnaryPlusExpression:
1998:        elif node.kind == ps.SyntaxKind.UnaryPredecrementExpression:
2000:        elif node.kind == ps.SyntaxKind.UnaryPreincrementExpression:
2002:        elif node.kind == ps.SyntaxKind.UnaryPropertyExpr:
2004:        elif node.kind == ps.SyntaxKind.UnarySelectPropertyExpr:
2006:        elif node.kind == ps.SyntaxKind.UnbasedUnsizedLiteralExpression:
2008:        elif node.kind == ps.SyntaxKind.UnconnectedDriveDirective:
2010:        elif node.kind == ps.SyntaxKind.UndefDirective:
2012:        elif node.kind == ps.SyntaxKind.UndefineAllDirective:
2014:        elif node.kind == ps.SyntaxKind.UnionType:
2016:        elif node.kind == ps.SyntaxKind.UniquenessConstraint:
2018:        elif node.kind == ps.SyntaxKind.UnitScope:
2020:        elif node.kind == ps.SyntaxKind.UntilPropertyExpr:
2022:        elif node.kind == ps.SyntaxKind.UntilWithPropertyExpr:
2024:        elif node.kind == ps.SyntaxKind.Untyped:
2026:        elif node.kind == ps.SyntaxKind.UserDefinedNetDeclaration:
2028:        elif node.kind == ps.SyntaxKind.ValueRangeExpression:
2030:        elif node.kind == ps.SyntaxKind.VariableDimension:
2032:        elif node.kind == ps.SyntaxKind.VariablePattern:
2034:        elif node.kind == ps.SyntaxKind.VariablePortHeader:
2036:        elif node.kind == ps.SyntaxKind.VirtualInterfaceType:
2038:        elif node.kind == ps.SyntaxKind.VoidCastedCallStatement:
2040:        elif node.kind == ps.SyntaxKind.VoidType:
2042:        elif node.kind == ps.SyntaxKind.WaitForkStatement:
2044:        elif node.kind == ps.SyntaxKind.WaitOrderStatement:
2046:        elif node.kind == ps.SyntaxKind.WaitStatement:
2048:        elif node.kind == ps.SyntaxKind.WildcardDimensionSpecifier:
2050:        elif node.kind == ps.SyntaxKind.WildcardEqualityExpression:
2052:        elif node.kind == ps.SyntaxKind.WildcardInequalityExpression:
2054:        elif node.kind == ps.SyntaxKind.WildcardLiteralExpression:
2056:        elif node.kind == ps.SyntaxKind.WildcardPattern:
2058:        elif node.kind == ps.SyntaxKind.WildcardPortConnection:
2060:        elif node.kind == ps.SyntaxKind.WildcardPortList:
2062:        elif node.kind == ps.SyntaxKind.WildcardUdpPortList:
2064:        elif node.kind == ps.SyntaxKind.WithClause:
2066:        elif node.kind == ps.SyntaxKind.WithFunctionClause:
2068:        elif node.kind == ps.SyntaxKind.WithFunctionSample:
2070:        elif node.kind == ps.SyntaxKind.WithinSequenceExpr:
2072:        elif node.kind == ps.SyntaxKind.XorAssignmentExpression:
